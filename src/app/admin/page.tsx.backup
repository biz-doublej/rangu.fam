'use client'

import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Card, CardHeader, CardContent } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { 
  Settings, 
  FileText, 
  Bell, 
  Shield, 
  Info, 
  Plus, 
  Edit, 
  Trash2, 
  Send,
  Save
} from 'lucide-react'

interface Notice {
  id: number
  title: string
  content: string
  type: string
  category: string
  author: string
  isPinned: boolean
  date: Date
}

interface PageData {
  company: { title: string; content: string }
  terms: { title: string; content: string }
  privacy: { title: string; content: string }
}

export default function AdminPage() {
  const [activeTab, setActiveTab] = useState('notices')
  const [notices, setNotices] = useState<Notice[]>([])
  const [pageData, setPageData] = useState<PageData | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [password, setPassword] = useState('')
  const [editingNotice, setEditingNotice] = useState<Notice | null>(null)
  const [newNotice, setNewNotice] = useState({
    title: '',
    content: '',
    type: 'announcement',
    category: '',
    author: 'gabriel0727',
    isPinned: false
  })

  // JWT 기반 인증
  const handleAuth = async () => {
    try {
      const response = await fetch('/api/admin/auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username: 'gabriel0727',
          password: password
        })
      })

      if (response.ok) {
        const result = await response.json()
        localStorage.setItem('adminToken', result.token)
        setIsAuthenticated(true)
        loadData()
      } else {
        alert('잘못된 비밀번호입니다')
      }
    } catch (error) {
      console.error('인증 오류:', error)
      alert('인증 중 오류가 발생했습니다')
    }
  }

  const loadData = async () => {
    try {
      const token = localStorage.getItem('adminToken')
      if (!token) {
        setIsAuthenticated(false)
        return
      }

      // 공지사항 로드
      const noticesRes = await fetch('/api/admin/notices', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      if (noticesRes.ok) {
        const noticesData = await noticesRes.json()
        setNotices(noticesData.notices)
      }

      // 페이지 데이터 로드
      const pagesRes = await fetch('/api/admin/pages', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
      if (pagesRes.ok) {
        const pagesData = await pagesRes.json()
        setPageData(pagesData.data)
      }
    } catch (error) {
      console.error('데이터 로드 오류:', error)
    }
  }

  const handleAddNotice = async () => {
    try {
      const response = await fetch('/api/admin/notices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        },
        body: JSON.stringify(newNotice)
      })

      if (response.ok) {
        const result = await response.json()
        setNotices([result.notice, ...notices])
        setNewNotice({
          title: '',
          content: '',
          type: 'announcement',
          category: '',
          author: 'gabriel0727',
          isPinned: false
        })
        alert('공지사항이 추가되었습니다! 디스코드에도 알림이 전송되었습니다.')
      }
    } catch (error) {
      console.error('공지사항 추가 오류:', error)
      alert('공지사항 추가 중 오류가 발생했습니다.')
    }
  }

  const handleDeleteNotice = async (id: number) => {
    if (!confirm('정말 삭제하시겠습니까?')) return

    try {
      const response = await fetch(`/api/admin/notices?id=${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        }
      })

      if (response.ok) {
        setNotices(notices.filter(n => n.id !== id))
        alert('공지사항이 삭제되었습니다.')
      }
    } catch (error) {
      console.error('공지사항 삭제 오류:', error)
      alert('공지사항 삭제 중 오류가 발생했습니다.')
    }
  }

  const handleUpdatePage = async (pageType: string, title: string, content: string) => {
    try {
      const response = await fetch('/api/admin/pages', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        },
        body: JSON.stringify({ pageType, title, content })
      })

      if (response.ok) {
        alert('페이지가 업데이트되었습니다.')
        loadData()
      }
    } catch (error) {
      console.error('페이지 업데이트 오류:', error)
      alert('페이지 업데이트 중 오류가 발생했습니다.')
    }
  }

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-900 text-gray-100 flex items-center justify-center">
        <Card className="bg-gray-800 border-gray-700 w-full max-w-md">
          <CardHeader>
            <h1 className="text-2xl font-bold text-gray-200 text-center">관리자 인증</h1>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <Input
                type="password"
                placeholder="관리자 비밀번호"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="bg-gray-700 border-gray-600 text-gray-200"
                onKeyDown={(e) => e.key === 'Enter' && handleAuth()}
              />
              <Button onClick={handleAuth} className="w-full bg-blue-600 hover:bg-blue-700">
                인증
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100">
      <div className="h-20"></div>
      
      <div className="max-w-6xl mx-auto px-4 py-12">
        {/* 페이지 제목 */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl font-bold text-white mb-4">관리자 대시보드</h1>
          <p className="text-gray-300">gabriel0727 전용 관리 페이지</p>
        </motion.div>

        {/* 탭 메뉴 */}
        <div className="flex space-x-1 mb-8">
          {[
            { id: 'notices', label: '공지사항 관리', icon: Bell },
            { id: 'pages', label: '페이지 관리', icon: FileText }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${
                activeTab === tab.id
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700 hover:text-gray-200'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              {tab.label}
            </button>
          ))}
        </div>

        {/* 공지사항 관리 */}
        {activeTab === 'notices' && (
          <div className="space-y-6">
            {/* 새 공지사항 추가 */}
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <h2 className="text-xl font-bold text-gray-200 flex items-center gap-2">
                  <Plus className="w-5 h-5" />
                  새 공지사항 추가
                </h2>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <Input
                    placeholder="제목"
                    value={newNotice.title}
                    onChange={(e) => setNewNotice({...newNotice, title: e.target.value})}
                    className="bg-gray-700 border-gray-600 text-gray-200"
                  />
                  <textarea
                    placeholder="내용"
                    value={newNotice.content}
                    onChange={(e) => setNewNotice({...newNotice, content: e.target.value})}
                    className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-gray-200 min-h-[100px]"
                  />
                  <div className="flex gap-4">
                    <Input
                      placeholder="카테고리"
                      value={newNotice.category}
                      onChange={(e) => setNewNotice({...newNotice, category: e.target.value})}
                      className="bg-gray-700 border-gray-600 text-gray-200"
                    />
                    <select
                      value={newNotice.type}
                      onChange={(e) => setNewNotice({...newNotice, type: e.target.value})}
                      className="px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-200"
                    >
                      <option value="announcement">일반</option>
                      <option value="update">업데이트</option>
                      <option value="policy">정책</option>
                      <option value="maintenance">점검</option>
                    </select>
                    <label className="flex items-center gap-2 text-gray-300">
                      <input
                        type="checkbox"
                        checked={newNotice.isPinned}
                        onChange={(e) => setNewNotice({...newNotice, isPinned: e.target.checked})}
                      />
                      상단 고정
                    </label>
                  </div>
                  <Button onClick={handleAddNotice} className="bg-blue-600 hover:bg-blue-700 flex items-center gap-2">
                    <Send className="w-4 h-4" />
                    공지사항 추가 (디스코드 알림)
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* 기존 공지사항 목록 */}
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <h2 className="text-xl font-bold text-gray-200">기존 공지사항</h2>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {notices.map((notice) => (
                    <div key={notice.id} className="bg-gray-700 p-4 rounded-lg">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-200">{notice.title}</h3>
                          <p className="text-gray-400 text-sm mt-1">{notice.content}</p>
                          <div className="flex items-center gap-4 mt-2 text-xs text-gray-500">
                            <span>{notice.category}</span>
                            <span>{notice.author}</span>
                            <span>{new Date(notice.date).toLocaleDateString('ko-KR')}</span>
                            {notice.isPinned && <span className="text-red-400">📌 고정</span>}
                          </div>
                        </div>
                        <div className="flex gap-2 ml-4">
                          <Button
                            size="sm"
                            className="bg-yellow-600 hover:bg-yellow-700"
                            onClick={() => setEditingNotice(notice)}
                          >
                            <Edit className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            className="bg-red-600 hover:bg-red-700"
                            onClick={() => handleDeleteNotice(notice.id)}
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* 페이지 관리 */}
        {activeTab === 'pages' && pageData && (
          <div className="space-y-6">
            {Object.entries(pageData).map(([key, data]) => (
              <Card key={key} className="bg-gray-800 border-gray-700">
                <CardHeader>
                  <h2 className="text-xl font-bold text-gray-200 flex items-center gap-2">
                    <FileText className="w-5 h-5" />
                    {data.title} 편집
                  </h2>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <Input
                      placeholder="제목"
                      defaultValue={data.title}
                      className="bg-gray-700 border-gray-600 text-gray-200"
                      id={`${key}-title`}
                    />
                    <textarea
                      placeholder="내용"
                      defaultValue={data.content}
                      className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-gray-200 min-h-[200px]"
                      id={`${key}-content`}
                    />
                    <Button
                      onClick={() => {
                        const titleEl = document.getElementById(`${key}-title`) as HTMLInputElement
                        const contentEl = document.getElementById(`${key}-content`) as HTMLTextAreaElement
                        handleUpdatePage(key, titleEl.value, contentEl.value)
                      }}
                      className="bg-green-600 hover:bg-green-700 flex items-center gap-2"
                    >
                      <Save className="w-4 h-4" />
                      저장
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
