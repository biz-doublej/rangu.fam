'use client'

import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  ExternalLink, 
  Plus, 
  Edit3, 
  Trash2, 
  Save, 
  X, 
  GripVertical,
  Globe
} from 'lucide-react'
import { Bookmark } from '@/types'
import { Button } from './Button'
import { Input } from './Input'
import toast from 'react-hot-toast'

interface BookmarkWidgetProps {
  userId: string
  className?: string
}

interface BookmarkFormData {
  title: string
  url: string
  description: string
  icon: string
}

export const BookmarkWidget: React.FC<BookmarkWidgetProps> = ({ 
  userId, 
  className = '' 
}) => {
  const [bookmarks, setBookmarks] = useState<Bookmark[]>([])
  const [loading, setLoading] = useState(true)
  const [isAddingNew, setIsAddingNew] = useState(false)
  const [editingId, setEditingId] = useState<string | null>(null)
  const [formData, setFormData] = useState<BookmarkFormData>({
    title: '',
    url: '',
    description: '',
    icon: 'üîó'
  })

  // Î∂ÅÎßàÌÅ¨ Î™©Î°ù Î°úÎìú
  const loadBookmarks = async () => {
    try {
      const response = await fetch(`/api/bookmarks?userId=${userId}`)
      const data = await response.json()
      
      if (data.success) {
        setBookmarks(data.data || [])
      } else {
        console.error('Î∂ÅÎßàÌÅ¨ Î°úÎìú Ïã§Ìå®:', data.error)
      }
    } catch (error) {
      console.error('Î∂ÅÎßàÌÅ¨ Î°úÎìú Ïò§Î•ò:', error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (userId) {
      loadBookmarks()
    }
  }, [userId])

  // ÏÉà Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞Ä
  const handleAddBookmark = async () => {
    if (!formData.title.trim() || !formData.url.trim()) {
      toast.error('Ï†úÎ™©Í≥º URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    try {
      const response = await fetch('/api/bookmarks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          ...formData
        })
      })

      const data = await response.json()

      if (data.success) {
        setBookmarks([...bookmarks, data.data])
        setFormData({ title: '', url: '', description: '', icon: 'üîó' })
        setIsAddingNew(false)
        toast.success('Î∂ÅÎßàÌÅ¨Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!')
      } else {
        toast.error(data.error || 'Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞Ä Ïò§Î•ò:', error)
      toast.error('ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  // Î∂ÅÎßàÌÅ¨ ÏàòÏ†ï
  const handleEditBookmark = async (bookmarkId: string) => {
    if (!formData.title.trim() || !formData.url.trim()) {
      toast.error('Ï†úÎ™©Í≥º URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
      return
    }

    try {
      const response = await fetch(`/api/bookmarks/${bookmarkId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      })

      const data = await response.json()

      if (data.success) {
        setBookmarks(bookmarks.map(bookmark => 
          bookmark._id === bookmarkId ? data.data : bookmark
        ))
        setEditingId(null)
        setFormData({ title: '', url: '', description: '', icon: 'üîó' })
        toast.success('Î∂ÅÎßàÌÅ¨Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!')
      } else {
        toast.error(data.error || 'Î∂ÅÎßàÌÅ¨ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('Î∂ÅÎßàÌÅ¨ ÏàòÏ†ï Ïò§Î•ò:', error)
      toast.error('ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  // Î∂ÅÎßàÌÅ¨ ÏÇ≠Ï†ú
  const handleDeleteBookmark = async (bookmarkId: string) => {
    if (!confirm('Ï†ïÎßêÎ°ú Ïù¥ Î∂ÅÎßàÌÅ¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      return
    }

    try {
      const response = await fetch(`/api/bookmarks/${bookmarkId}`, {
        method: 'DELETE'
      })

      const data = await response.json()

      if (data.success) {
        setBookmarks(bookmarks.filter(bookmark => bookmark._id !== bookmarkId))
        toast.success('Î∂ÅÎßàÌÅ¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!')
      } else {
        toast.error(data.error || 'Î∂ÅÎßàÌÅ¨ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('Î∂ÅÎßàÌÅ¨ ÏÇ≠Ï†ú Ïò§Î•ò:', error)
      toast.error('ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  // Ìé∏Ïßë Î™®Îìú ÏãúÏûë
  const startEdit = (bookmark: Bookmark) => {
    setEditingId(bookmark._id || null)
    setFormData({
      title: bookmark.title,
      url: bookmark.url,
      description: bookmark.description || '',
      icon: bookmark.icon || 'üîó'
    })
  }

  // Ìé∏Ïßë Ï∑®ÏÜå
  const cancelEdit = () => {
    setEditingId(null)
    setIsAddingNew(false)
    setFormData({ title: '', url: '', description: '', icon: 'üîó' })
  }

  // Ïô∏Î∂Ä ÎßÅÌÅ¨ Ïó¥Í∏∞
  const openLink = (url: string) => {
    window.open(url, '_blank', 'noopener,noreferrer')
  }

  if (loading) {
    return (
      <div className={`glass-card p-4 ${className}`}>
        <div className="flex items-center space-x-2 mb-4">
          <Globe className="w-5 h-5 text-primary-600" />
          <h3 className="text-lg font-semibold text-gray-800">Î∞îÎ°úÍ∞ÄÍ∏∞</h3>
        </div>
        <div className="space-y-2">
          {[1, 2, 3].map(i => (
            <div key={i} className="h-12 bg-gray-100 rounded-lg animate-pulse" />
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className={`glass-card p-4 ${className}`}>
      {/* Ìó§Îçî */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <Globe className="w-5 h-5 text-primary-600" />
          <h3 className="text-lg font-semibold text-gray-800">Î∞îÎ°úÍ∞ÄÍ∏∞</h3>
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setIsAddingNew(true)}
          className="text-primary-600 hover:bg-primary-50"
        >
          <Plus className="w-4 h-4" />
        </Button>
      </div>

      {/* Î∂ÅÎßàÌÅ¨ Î™©Î°ù */}
      <div className="space-y-2">
        <AnimatePresence>
          {bookmarks.map((bookmark) => (
            <motion.div
              key={bookmark._id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="group"
            >
              {editingId === bookmark._id ? (
                // Ìé∏Ïßë Î™®Îìú
                <div className="space-y-2 p-3 bg-gray-50 rounded-lg">
                  <div className="flex space-x-2">
                    <Input
                      type="text"
                      placeholder="ÏïÑÏù¥ÏΩò (emoji)"
                      value={formData.icon}
                      onChange={(e) => setFormData({ ...formData, icon: e.target.value })}
                      className="w-16 text-center"
                    />
                    <Input
                      type="text"
                      placeholder="Ï†úÎ™©"
                      value={formData.title}
                      onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                      className="flex-1"
                    />
                  </div>
                  <Input
                    type="url"
                    placeholder="URL"
                    value={formData.url}
                    onChange={(e) => setFormData({ ...formData, url: e.target.value })}
                  />
                  <Input
                    type="text"
                    placeholder="ÏÑ§Î™Ö (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  />
                  <div className="flex space-x-2">
                    <Button
                      variant="primary"
                      size="sm"
                      onClick={() => handleEditBookmark(bookmark._id!)}
                    >
                      <Save className="w-3 h-3 mr-1" />
                      Ï†ÄÏû•
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={cancelEdit}
                    >
                      <X className="w-3 h-3 mr-1" />
                      Ï∑®ÏÜå
                    </Button>
                  </div>
                </div>
              ) : (
                // ÏùºÎ∞ò ÌëúÏãú Î™®Îìú
                <div className="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-50 transition-colors">
                  <GripVertical className="w-4 h-4 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity cursor-move" />
                  <button
                    onClick={() => openLink(bookmark.url)}
                    className="flex items-center space-x-3 flex-1 text-left"
                  >
                    <span className="text-lg">{bookmark.icon}</span>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-800 truncate">
                        {bookmark.title}
                      </p>
                      {bookmark.description && (
                        <p className="text-xs text-gray-500 truncate">
                          {bookmark.description}
                        </p>
                      )}
                    </div>
                    <ExternalLink className="w-4 h-4 text-gray-400" />
                  </button>
                  <div className="flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => startEdit(bookmark)}
                      className="p-1 h-auto"
                    >
                      <Edit3 className="w-3 h-3 text-gray-500" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDeleteBookmark(bookmark._id!)}
                      className="p-1 h-auto"
                    >
                      <Trash2 className="w-3 h-3 text-red-500" />
                    </Button>
                  </div>
                </div>
              )}
            </motion.div>
          ))}
        </AnimatePresence>

        {/* ÏÉà Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞Ä Ìèº */}
        <AnimatePresence>
          {isAddingNew && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="space-y-2 p-3 bg-gray-50 rounded-lg"
            >
              <div className="flex space-x-2">
                <Input
                  type="text"
                  placeholder="üîó"
                  value={formData.icon}
                  onChange={(e) => setFormData({ ...formData, icon: e.target.value })}
                  className="w-16 text-center"
                />
                <Input
                  type="text"
                  placeholder="Ï†úÎ™©"
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  className="flex-1"
                />
              </div>
              <Input
                type="url"
                placeholder="https://example.com"
                value={formData.url}
                onChange={(e) => setFormData({ ...formData, url: e.target.value })}
              />
              <Input
                type="text"
                placeholder="ÏÑ§Î™Ö (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              />
              <div className="flex space-x-2">
                <Button
                  variant="primary"
                  size="sm"
                  onClick={handleAddBookmark}
                >
                  <Save className="w-3 h-3 mr-1" />
                  Ï†ÄÏû•
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={cancelEdit}
                >
                  <X className="w-3 h-3 mr-1" />
                  Ï∑®ÏÜå
                </Button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Îπà ÏÉÅÌÉú */}
        {bookmarks.length === 0 && !isAddingNew && (
          <div className="text-center py-8">
            <Globe className="w-12 h-12 text-gray-300 mx-auto mb-3" />
            <p className="text-sm text-gray-500 mb-3">
              ÏïÑÏßÅ Î∞îÎ°úÍ∞ÄÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§.
            </p>
            <Button
              variant="primary"
              size="sm"
              onClick={() => setIsAddingNew(true)}
            >
              <Plus className="w-4 h-4 mr-1" />
              Ï≤´ Î≤àÏß∏ Î∞îÎ°úÍ∞ÄÍ∏∞ Ï∂îÍ∞Ä
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}